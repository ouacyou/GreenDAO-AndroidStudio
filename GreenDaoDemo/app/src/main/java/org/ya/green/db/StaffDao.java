package org.ya.green.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.ya.green.db.Staff;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STAFF.
*/
public class StaffDao extends AbstractDao<Staff, Long> {

    public static final String TABLENAME = "STAFF";

    /**
     * Properties of entity Staff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RegDate = new Property(1, java.util.Date.class, "regDate", false, "REG_DATE");
        public final static Property NoId = new Property(2, String.class, "noId", false, "NO_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Dept = new Property(4, String.class, "dept", false, "DEPT");
        public final static Property ComId = new Property(5, Long.class, "comId", false, "COM_ID");
    };

    private DaoSession daoSession;

    private Query<Staff> company_StaffListQuery;

    public StaffDao(DaoConfig config) {
        super(config);
    }
    
    public StaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STAFF' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'REG_DATE' INTEGER," + // 1: regDate
                "'NO_ID' TEXT," + // 2: noId
                "'NAME' TEXT," + // 3: name
                "'DEPT' TEXT," + // 4: dept
                "'COM_ID' INTEGER);"); // 5: comId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STAFF'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date regDate = entity.getRegDate();
        if (regDate != null) {
            stmt.bindLong(2, regDate.getTime());
        }
 
        String noId = entity.getNoId();
        if (noId != null) {
            stmt.bindString(3, noId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(5, dept);
        }
 
        Long comId = entity.getComId();
        if (comId != null) {
            stmt.bindLong(6, comId);
        }
    }

    @Override
    protected void attachEntity(Staff entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Staff readEntity(Cursor cursor, int offset) {
        Staff entity = new Staff( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // regDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // noId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dept
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // comId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Staff entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRegDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setNoId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDept(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Staff entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Staff entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "staffList" to-many relationship of Company. */
    public List<Staff> _queryCompany_StaffList(Long comId) {
        synchronized (this) {
            if (company_StaffListQuery == null) {
                QueryBuilder<Staff> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ComId.eq(null));
                company_StaffListQuery = queryBuilder.build();
            }
        }
        Query<Staff> query = company_StaffListQuery.forCurrentThread();
        query.setParameter(0, comId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCompanyDao().getAllColumns());
            builder.append(" FROM STAFF T");
            builder.append(" LEFT JOIN COMPANY T0 ON T.'COM_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Staff loadCurrentDeep(Cursor cursor, boolean lock) {
        Staff entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Company company = loadCurrentOther(daoSession.getCompanyDao(), cursor, offset);
        entity.setCompany(company);

        return entity;    
    }

    public Staff loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Staff> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Staff> list = new ArrayList<Staff>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Staff> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Staff> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
